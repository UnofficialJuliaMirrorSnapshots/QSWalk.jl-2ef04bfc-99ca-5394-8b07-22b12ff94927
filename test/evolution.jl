@testset "Evolution" begin
    @testset "Exponent function" begin
    @test evolve_operator(zeros(4, 4), 1.) ≈ Matrix{Float64}(I,4,4)
    A = [1. im 2;
    3 4 5im;
    6 7 8]
    @test evolve_operator(A,4.2) ≈ exp(4.2*A)

    # type check
    @test_throws MethodError evolve_operator(spzeros(4, 4), 1.)
  end

  @testset "Evolution functions" begin
    #size 4x4
    A = zeros(ComplexF64,4,4)
    A[2,2] = 1/2
    A[4,4] = 1/2
    S = [0.0+0.0im 0.5+0.0im 0.0+0.0im 0.0+0.0im 0.5+0.0im 0.5+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im;
        -0.5+0.0im -0.25+0.0im 0.0+0.5im 0.0+0.0im 0.0+0.0im 0.5+0.0im 0.5+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im;
        0.0+0.0im 0.0+0.5im -0.25+0.0im 0.0+0.5im 0.0+0.0im 0.0+0.0im 0.5+0.0im 0.5+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im;
        0.0+0.0im 0.0+0.0im 0.0+0.5im -0.25+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.5+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im;
        -0.5+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im -0.25+0.0im 0.5+0.0im 0.0+0.0im 0.0+0.0im 0.0-0.5im 0.5+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im;
        0.0+0.0im -0.5+0.0im 0.0+0.0im 0.0+0.0im -0.5+0.0im -0.5+0.0im 0.0+0.5im 0.0+0.0im 0.0+0.0im 0.0-0.5im 0.5+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im;
        0.0+0.0im 0.0+0.0im -0.5+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.5im -0.5+0.0im 0.0+0.5im 0.0+0.0im 0.0+0.0im 0.0-0.5im 0.5+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im;
        0.0+0.0im 0.0+0.0im 0.0+0.0im -0.5+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.5im -0.5+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0-0.5im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im;
        0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0-0.5im 0.0+0.0im 0.0+0.0im 0.0+0.0im -0.25+0.0im 0.5+0.0im 0.0+0.0im 0.0+0.0im 0.0-0.5im 0.5+0.0im 0.0+0.0im 0.0+0.0im;
        0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0-0.5im 0.0+0.0im 0.0+0.0im -0.5+0.0im -0.5+0.0im 0.0+0.5im 0.0+0.0im 0.0+0.0im 0.0-0.5im 0.5+0.0im 0.0+0.0im;
        0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0-0.5im 0.0+0.0im 0.0+0.0im 0.0+0.5im -0.5+0.0im 0.0+0.5im 0.0+0.0im 0.0+0.0im 0.0-0.5im 0.5+0.0im;
        0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0-0.5im 0.0+0.0im 0.0+0.0im 0.0+0.5im -0.5+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0-0.5im;
        0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0-0.5im 0.0+0.0im 0.0+0.0im 0.0+0.0im -0.25+0.0im 0.5+0.0im 0.0+0.0im 0.0+0.0im;
        0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0-0.5im 0.0+0.0im 0.0+0.0im -0.5+0.0im -0.5+0.0im 0.0+0.5im 0.0+0.0im;
         0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0-0.5im 0.0+0.0im 0.0+0.0im 0.0+0.5im -0.5+0.0im 0.0+0.5im;
         0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0+0.0im 0.0-0.5im 0.0+0.0im 0.0+0.0im 0.0+0.5im -0.5+0.0im]

    result_matrix42 = [0.495478+1.2483e-17im -0.162938+0.0285877im 0.0104949-0.055023im -0.000950804+0.00066496im;
     -0.162938-0.0285877im 0.271419-1.3821e-17im -0.000400553+0.107483im 0.00474894+0.00823693im;
     0.0104949+0.055023im -0.000400553-0.107483im 0.155099-2.82874e-18im 0.00737685+0.0355666im;
    -0.000950804-0.00066496im 0.00474894-0.00823693im 0.00737685-0.0355666im 0.0780051-2.51094e-18im]
    result_matrix10 = [0.34111+5.57946e-18im -0.121394+0.0872953im -0.0693429+0.0173517im -0.0338042-0.0543639im;
     -0.121394-0.0872953im 0.248919-4.2406e-17im 0.0565208+0.0998314im -0.0158367+0.0694652im
     -0.0693429-0.0173517im 0.0565208-0.0998314im 0.223367-1.11563e-17im 0.0486222+0.0838723im;
     -0.0338042+0.0543639im -0.0158367-0.0694652im 0.0486222-0.0838723im 0.186604-2.90591e-18im]
    state = zeros(4,4)
    state[3,3] = 1
    #trivial evolutions
    @test evolve(zeros(16, 16), A, 0.) ≈ A
    @test evolve(zeros(16, 16), sparse(A), 0.) ≈ A
    @test evolve(spzeros(16, 16), A, 0.) ≈ A
    @test evolve(spzeros(16, 16), A, [0., 5., 10.])[1] ≈ A
    @test evolve(spzeros(16, 16), A, [0., 5., 10.])[2] ≈ A
    @test evolve(spzeros(16, 16), A, [0., 5., 10.])[3] ≈ A

    @test evolve(S, A, 0.) ≈ A
    @test evolve(Matrix{Float64}(I, 16, 16), A) ≈ A
    @test isapprox(evolve(S, A, 4.2), result_matrix42, atol=1e-5)
    @test isapprox(evolve(S, A, [0., 4.2, 10.]), [A, result_matrix42, result_matrix10], atol=1e-5)

  end
end
